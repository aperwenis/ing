// Code generated by MockGen. DO NOT EDIT.
// Source: kafka/messageProducer.go

// Package kafka is a generated GoMock package.
package kafka

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageProducer is a mock of MessageProducer interface.
type MockMessageProducer struct {
	ctrl     *gomock.Controller
	recorder *MockMessageProducerMockRecorder
}

// MockMessageProducerMockRecorder is the mock recorder for MockMessageProducer.
type MockMessageProducerMockRecorder struct {
	mock *MockMessageProducer
}

// NewMockMessageProducer creates a new mock instance.
func NewMockMessageProducer(ctrl *gomock.Controller) *MockMessageProducer {
	mock := &MockMessageProducer{ctrl: ctrl}
	mock.recorder = &MockMessageProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageProducer) EXPECT() *MockMessageProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMessageProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMessageProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMessageProducer)(nil).Close))
}

// Produce mocks base method.
func (m *MockMessageProducer) Produce(message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockMessageProducerMockRecorder) Produce(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockMessageProducer)(nil).Produce), message)
}
